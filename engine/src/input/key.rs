#![allow(dead_code)]
use strum::EnumCount;

use num_enum::TryFromPrimitive;
use winit::keyboard::ModifiersState;

#[repr(u32)]
#[derive(Clone, Copy, Debug, Eq, PartialEq, PartialOrd, EnumCount, Hash, TryFromPrimitive)]
pub enum Key {
    Key1,
    Key2,
    Key3,
    Key4,
    Key5,
    Key6,
    Key7,
    Key8,
    Key9,
    Key0,

    A,
    B,
    C,
    D,
    E,
    F,
    G,
    H,
    I,
    J,
    K,
    L,
    M,
    N,
    O,
    P,
    Q,
    R,
    S,
    T,
    U,
    V,
    W,
    X,
    Y,
    Z,

    Escape,

    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    F11,
    F12,
    F13,
    F14,
    F15,
    F16,
    F17,
    F18,
    F19,
    F20,
    F21,
    F22,
    F23,
    F24,

    Snapshot,
    Scroll,
    Pause,

    Insert,
    Home,
    Delete,
    End,
    PageDown,
    PageUp,

    Left,
    Up,
    Right,
    Down,

    Backspace,
    Return,
    Space,

    Compose,

    Caret,

    Numlock,
    Numpad0,
    Numpad1,
    Numpad2,
    Numpad3,
    Numpad4,
    Numpad5,
    Numpad6,
    Numpad7,
    Numpad8,
    Numpad9,
    NumpadAdd,
    NumpadDivide,
    NumpadDecimal,
    NumpadComma,
    NumpadEnter,
    NumpadEquals,
    NumpadMultiply,
    NumpadSubtract,

    AbntC1,
    AbntC2,
    Apostrophe,
    Apps,
    Asterisk,
    At,
    Ax,
    Backslash,
    Calculator,
    Capital,
    Colon,
    Comma,
    Convert,
    Equals,
    Grave,
    Kana,
    Kanji,
    LAlt,
    LBracket,
    LControl,
    LShift,
    LWin,
    Mail,
    MediaSelect,
    MediaStop,
    Minus,
    Mute,
    MyComputer,
    NavigateForward,
    NavigateBackward,
    NextTrack,
    NoConvert,
    OEM102,
    Period,
    PlayPause,
    Plus,
    Power,
    PrevTrack,
    RAlt,
    RBracket,
    RControl,
    RShift,
    RWin,
    Semicolon,
    Slash,
    Sleep,
    Stop,
    Sysrq,
    Tab,
    Underline,
    Unlabeled,
    VolumeDown,
    VolumeUp,
    Wake,
    WebBack,
    WebFavorites,
    WebForward,
    WebHome,
    WebRefresh,
    WebSearch,
    WebStop,
    Yen,
    Copy,
    Paste,
    Cut,
    Backquote,
    IntlBackslash,
    IntlRo,
    Quote,
    CapsLock,
    ContextMenu,
    KanaMode,
    Lang1,
    Lang2,
    Lang3,
    Lang4,
    Lang5,
    NonConvert,
    Help,
    NumpadBackspace,
    NumpadClear,
    NumpadClearEntry,
    NumpadHash,
    NumpadMemoryAdd,
    NumpadMemoryClear,
    NumpadMemoryRecall,
    NumpadMemoryStore,
    NumpadMemorySubtract,
    NumpadParenLeft,
    NumpadParenRight,
    NumpadStar,
    Fn,
    FnLock,
    PrintScreen,
    Eject,
    LaunchApp1,
    LaunchApp2,
    Meta,
    Hyper,
    Turbo,
    Abort,
    Resume,
    Suspend,
    Again,
    Find,
    Open,
    Props,
    Select,
    Undo,
    Hiragana,
    Katakana,
    F25,
    F26,
    F27,
    F28,
    F29,
    F30,
    F31,
    F32,
    F33,
    F34,
    F35,
}

impl From<winit::keyboard::KeyCode> for Key {
    fn from(vk: winit::keyboard::KeyCode) -> Self {
        match vk {
            winit::keyboard::KeyCode::Digit1 => Key::Key1,
            winit::keyboard::KeyCode::Digit2 => Key::Key2,
            winit::keyboard::KeyCode::Digit3 => Key::Key3,
            winit::keyboard::KeyCode::Digit4 => Key::Key4,
            winit::keyboard::KeyCode::Digit5 => Key::Key5,
            winit::keyboard::KeyCode::Digit6 => Key::Key6,
            winit::keyboard::KeyCode::Digit7 => Key::Key7,
            winit::keyboard::KeyCode::Digit8 => Key::Key8,
            winit::keyboard::KeyCode::Digit9 => Key::Key9,
            winit::keyboard::KeyCode::Digit0 => Key::Key0,
            winit::keyboard::KeyCode::KeyA => Key::A,
            winit::keyboard::KeyCode::KeyB => Key::B,
            winit::keyboard::KeyCode::KeyC => Key::C,
            winit::keyboard::KeyCode::KeyD => Key::D,
            winit::keyboard::KeyCode::KeyE => Key::E,
            winit::keyboard::KeyCode::KeyF => Key::F,
            winit::keyboard::KeyCode::KeyG => Key::G,
            winit::keyboard::KeyCode::KeyH => Key::H,
            winit::keyboard::KeyCode::KeyI => Key::I,
            winit::keyboard::KeyCode::KeyJ => Key::J,
            winit::keyboard::KeyCode::KeyK => Key::K,
            winit::keyboard::KeyCode::KeyL => Key::L,
            winit::keyboard::KeyCode::KeyM => Key::M,
            winit::keyboard::KeyCode::KeyN => Key::N,
            winit::keyboard::KeyCode::KeyO => Key::O,
            winit::keyboard::KeyCode::KeyP => Key::P,
            winit::keyboard::KeyCode::KeyQ => Key::Q,
            winit::keyboard::KeyCode::KeyR => Key::R,
            winit::keyboard::KeyCode::KeyS => Key::S,
            winit::keyboard::KeyCode::KeyT => Key::T,
            winit::keyboard::KeyCode::KeyU => Key::U,
            winit::keyboard::KeyCode::KeyV => Key::V,
            winit::keyboard::KeyCode::KeyW => Key::W,
            winit::keyboard::KeyCode::KeyX => Key::X,
            winit::keyboard::KeyCode::KeyY => Key::Y,
            winit::keyboard::KeyCode::KeyZ => Key::Z,
            winit::keyboard::KeyCode::Escape => Key::Escape,
            winit::keyboard::KeyCode::F1 => Key::F1,
            winit::keyboard::KeyCode::F2 => Key::F2,
            winit::keyboard::KeyCode::F3 => Key::F3,
            winit::keyboard::KeyCode::F4 => Key::F4,
            winit::keyboard::KeyCode::F5 => Key::F5,
            winit::keyboard::KeyCode::F6 => Key::F6,
            winit::keyboard::KeyCode::F7 => Key::F7,
            winit::keyboard::KeyCode::F8 => Key::F8,
            winit::keyboard::KeyCode::F9 => Key::F9,
            winit::keyboard::KeyCode::F10 => Key::F10,
            winit::keyboard::KeyCode::F11 => Key::F11,
            winit::keyboard::KeyCode::F12 => Key::F12,
            winit::keyboard::KeyCode::F13 => Key::F13,
            winit::keyboard::KeyCode::F14 => Key::F14,
            winit::keyboard::KeyCode::F15 => Key::F15,
            winit::keyboard::KeyCode::F16 => Key::F16,
            winit::keyboard::KeyCode::F17 => Key::F17,
            winit::keyboard::KeyCode::F18 => Key::F18,
            winit::keyboard::KeyCode::F19 => Key::F19,
            winit::keyboard::KeyCode::F20 => Key::F20,
            winit::keyboard::KeyCode::F21 => Key::F21,
            winit::keyboard::KeyCode::F22 => Key::F22,
            winit::keyboard::KeyCode::F23 => Key::F23,
            winit::keyboard::KeyCode::F24 => Key::F24,
            winit::keyboard::KeyCode::ScrollLock => Key::Scroll,
            winit::keyboard::KeyCode::Pause => Key::Pause,
            winit::keyboard::KeyCode::Insert => Key::Insert,
            winit::keyboard::KeyCode::Home => Key::Home,
            winit::keyboard::KeyCode::Delete => Key::Delete,
            winit::keyboard::KeyCode::End => Key::End,
            winit::keyboard::KeyCode::PageDown => Key::PageDown,
            winit::keyboard::KeyCode::PageUp => Key::PageUp,
            winit::keyboard::KeyCode::ArrowLeft => Key::Left,
            winit::keyboard::KeyCode::ArrowUp => Key::Up,
            winit::keyboard::KeyCode::ArrowRight => Key::Right,
            winit::keyboard::KeyCode::ArrowDown => Key::Down,
            winit::keyboard::KeyCode::Backspace => Key::Backspace,
            winit::keyboard::KeyCode::Enter => Key::Return,
            winit::keyboard::KeyCode::Space => Key::Space,
            winit::keyboard::KeyCode::NumLock => Key::Numlock,
            winit::keyboard::KeyCode::Numpad0 => Key::Numpad0,
            winit::keyboard::KeyCode::Numpad1 => Key::Numpad1,
            winit::keyboard::KeyCode::Numpad2 => Key::Numpad2,
            winit::keyboard::KeyCode::Numpad3 => Key::Numpad3,
            winit::keyboard::KeyCode::Numpad4 => Key::Numpad4,
            winit::keyboard::KeyCode::Numpad5 => Key::Numpad5,
            winit::keyboard::KeyCode::Numpad6 => Key::Numpad6,
            winit::keyboard::KeyCode::Numpad7 => Key::Numpad7,
            winit::keyboard::KeyCode::Numpad8 => Key::Numpad8,
            winit::keyboard::KeyCode::Numpad9 => Key::Numpad9,
            winit::keyboard::KeyCode::NumpadAdd => Key::NumpadAdd,
            winit::keyboard::KeyCode::NumpadDivide => Key::NumpadDivide,
            winit::keyboard::KeyCode::NumpadDecimal => Key::NumpadDecimal,
            winit::keyboard::KeyCode::NumpadComma => Key::NumpadComma,
            winit::keyboard::KeyCode::NumpadEnter => Key::NumpadEnter,
            winit::keyboard::KeyCode::NumpadEqual => Key::NumpadEquals,
            winit::keyboard::KeyCode::NumpadMultiply => Key::NumpadMultiply,
            winit::keyboard::KeyCode::NumpadSubtract => Key::NumpadSubtract,
            winit::keyboard::KeyCode::Backslash => Key::Backslash,
            winit::keyboard::KeyCode::Comma => Key::Comma,
            winit::keyboard::KeyCode::Convert => Key::Convert,
            winit::keyboard::KeyCode::Equal => Key::Equals,
            winit::keyboard::KeyCode::AltLeft => Key::LAlt,
            winit::keyboard::KeyCode::BracketLeft => Key::LBracket,
            winit::keyboard::KeyCode::ControlLeft => Key::LControl,
            winit::keyboard::KeyCode::ShiftLeft => Key::LShift,
            winit::keyboard::KeyCode::SuperLeft => Key::LWin,
            winit::keyboard::KeyCode::LaunchMail => Key::Mail,
            winit::keyboard::KeyCode::MediaSelect => Key::MediaSelect,
            winit::keyboard::KeyCode::MediaStop => Key::MediaStop,
            winit::keyboard::KeyCode::Minus => Key::Minus,
            winit::keyboard::KeyCode::AudioVolumeMute => Key::Mute,
            winit::keyboard::KeyCode::BrowserForward => Key::WebForward,
            winit::keyboard::KeyCode::BrowserBack => Key::NavigateBackward,
            winit::keyboard::KeyCode::MediaTrackNext => Key::NextTrack,
            winit::keyboard::KeyCode::Period => Key::Period,
            winit::keyboard::KeyCode::MediaPlayPause => Key::PlayPause,
            winit::keyboard::KeyCode::Power => Key::Power,
            winit::keyboard::KeyCode::MediaTrackPrevious => Key::PrevTrack,
            winit::keyboard::KeyCode::AltRight => Key::RAlt,
            winit::keyboard::KeyCode::BracketRight => Key::RBracket,
            winit::keyboard::KeyCode::ControlRight => Key::RControl,
            winit::keyboard::KeyCode::ShiftRight => Key::RShift,
            winit::keyboard::KeyCode::SuperRight => Key::RWin,
            winit::keyboard::KeyCode::Semicolon => Key::Semicolon,
            winit::keyboard::KeyCode::Slash => Key::Slash,
            winit::keyboard::KeyCode::Sleep => Key::Sleep,
            winit::keyboard::KeyCode::Tab => Key::Tab,
            winit::keyboard::KeyCode::AudioVolumeDown => Key::VolumeDown,
            winit::keyboard::KeyCode::AudioVolumeUp => Key::VolumeUp,
            winit::keyboard::KeyCode::WakeUp => Key::Wake,
            winit::keyboard::KeyCode::BrowserFavorites => Key::WebFavorites,
            winit::keyboard::KeyCode::BrowserHome => Key::WebHome,
            winit::keyboard::KeyCode::BrowserRefresh => Key::WebRefresh,
            winit::keyboard::KeyCode::BrowserSearch => Key::WebSearch,
            winit::keyboard::KeyCode::BrowserStop => Key::WebStop,
            winit::keyboard::KeyCode::IntlYen => Key::Yen,
            winit::keyboard::KeyCode::Copy => Key::Copy,
            winit::keyboard::KeyCode::Paste => Key::Paste,
            winit::keyboard::KeyCode::Cut => Key::Cut,
            winit::keyboard::KeyCode::Backquote => Key::Backquote,
            winit::keyboard::KeyCode::IntlBackslash => Key::IntlBackslash,
            winit::keyboard::KeyCode::IntlRo => Key::IntlRo,
            winit::keyboard::KeyCode::Quote => Key::Quote,
            winit::keyboard::KeyCode::CapsLock => Key::CapsLock,
            winit::keyboard::KeyCode::ContextMenu => Key::ContextMenu,
            winit::keyboard::KeyCode::KanaMode => Key::KanaMode,
            winit::keyboard::KeyCode::Lang1 => Key::Lang1,
            winit::keyboard::KeyCode::Lang2 => Key::Lang2,
            winit::keyboard::KeyCode::Lang3 => Key::Lang3,
            winit::keyboard::KeyCode::Lang4 => Key::Lang4,
            winit::keyboard::KeyCode::Lang5 => Key::Lang5,
            winit::keyboard::KeyCode::NonConvert => Key::NonConvert,
            winit::keyboard::KeyCode::Help => Key::Help,
            winit::keyboard::KeyCode::NumpadBackspace => Key::NumpadBackspace,
            winit::keyboard::KeyCode::NumpadClear => Key::NumpadClear,
            winit::keyboard::KeyCode::NumpadClearEntry => Key::NumpadClearEntry,
            winit::keyboard::KeyCode::NumpadHash => Key::NumpadHash,
            winit::keyboard::KeyCode::NumpadMemoryAdd => Key::NumpadMemoryAdd,
            winit::keyboard::KeyCode::NumpadMemoryClear => Key::NumpadMemoryClear,
            winit::keyboard::KeyCode::NumpadMemoryRecall => Key::NumpadMemoryRecall,
            winit::keyboard::KeyCode::NumpadMemoryStore => Key::NumpadMemoryStore,
            winit::keyboard::KeyCode::NumpadMemorySubtract => Key::NumpadMemorySubtract,
            winit::keyboard::KeyCode::NumpadParenLeft => Key::NumpadParenLeft,
            winit::keyboard::KeyCode::NumpadParenRight => Key::NumpadParenRight,
            winit::keyboard::KeyCode::NumpadStar => Key::NumpadStar,
            winit::keyboard::KeyCode::Fn => Key::Fn,
            winit::keyboard::KeyCode::FnLock => Key::FnLock,
            winit::keyboard::KeyCode::PrintScreen => Key::PrintScreen,
            winit::keyboard::KeyCode::Eject => Key::Eject,
            winit::keyboard::KeyCode::LaunchApp1 => Key::LaunchApp1,
            winit::keyboard::KeyCode::LaunchApp2 => Key::LaunchApp2,
            winit::keyboard::KeyCode::Meta => Key::Meta,
            winit::keyboard::KeyCode::Hyper => Key::Hyper,
            winit::keyboard::KeyCode::Turbo => Key::Turbo,
            winit::keyboard::KeyCode::Abort => Key::Abort,
            winit::keyboard::KeyCode::Resume => Key::Resume,
            winit::keyboard::KeyCode::Suspend => Key::Suspend,
            winit::keyboard::KeyCode::Again => Key::Again,
            winit::keyboard::KeyCode::Find => Key::Find,
            winit::keyboard::KeyCode::Open => Key::Open,
            winit::keyboard::KeyCode::Props => Key::Props,
            winit::keyboard::KeyCode::Select => Key::Select,
            winit::keyboard::KeyCode::Undo => Key::Undo,
            winit::keyboard::KeyCode::Hiragana => Key::Hiragana,
            winit::keyboard::KeyCode::Katakana => Key::Katakana,
            winit::keyboard::KeyCode::F25 => Key::F25,
            winit::keyboard::KeyCode::F26 => Key::F26,
            winit::keyboard::KeyCode::F27 => Key::F27,
            winit::keyboard::KeyCode::F28 => Key::F28,
            winit::keyboard::KeyCode::F29 => Key::F29,
            winit::keyboard::KeyCode::F30 => Key::F30,
            winit::keyboard::KeyCode::F31 => Key::F31,
            winit::keyboard::KeyCode::F32 => Key::F32,
            winit::keyboard::KeyCode::F33 => Key::F33,
            winit::keyboard::KeyCode::F34 => Key::F34,
            winit::keyboard::KeyCode::F35 => Key::F35,
            k => panic!("Unknown keycode {k:?}"),
        }
    }
}

#[derive(Clone, Copy, Debug, Eq, PartialEq, PartialOrd, EnumCount, Hash)]
pub enum Modifier {
    // Support for right modifiers will be added when winit does so
    LeftShift,
    LeftCtrl,
    LeftAlt,

    Meta,
}

#[derive(Copy, Clone, PartialEq, Eq, Default, Debug, Hash)]
pub struct ModifierSet {
    modifiers: [bool; Modifier::COUNT],
}

impl ModifierSet {
    pub fn new(left_shift: bool, left_alt: bool, left_ctrl: bool, meta: bool) -> Self {
        let mut set = ModifierSet::default();
        set.modifiers[Modifier::LeftShift as usize] = left_shift;
        set.modifiers[Modifier::LeftAlt as usize] = left_alt;
        set.modifiers[Modifier::LeftCtrl as usize] = left_ctrl;
        set.modifiers[Modifier::Meta as usize] = meta;
        set
    }

    pub fn left_ctrl(&self) -> bool {
        self.modifiers[Modifier::LeftCtrl as usize]
    }
    pub fn left_alt(&self) -> bool {
        self.modifiers[Modifier::LeftAlt as usize]
    }
    pub fn left_shift(&self) -> bool {
        self.modifiers[Modifier::LeftShift as usize]
    }
    pub fn meta(&self) -> bool {
        self.modifiers[Modifier::Meta as usize]
    }
}

impl From<u32> for ModifierSet {
    fn from(bitmask: u32) -> Self {
        let mut set = ModifierSet::default();
        if bitmask & ModifiersState::SHIFT.bits() != 0 {
            set.modifiers[Modifier::LeftShift as usize] = true;
        }
        if bitmask & ModifiersState::ALT.bits() != 0 {
            set.modifiers[Modifier::LeftAlt as usize] = true;
        }
        if bitmask & ModifiersState::CONTROL.bits() != 0 {
            set.modifiers[Modifier::LeftCtrl as usize] = true;
        }
        if bitmask & ModifiersState::SUPER.bits() != 0 {
            set.modifiers[Modifier::Meta as usize] = true;
        }

        set
    }
}
