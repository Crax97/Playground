#include "templates/scene_common.incl"


layout(location = 0) in vec3 vertex_position;
layout(location = 1) in vec3 world_position;
layout(location = 2) in vec2 uv;
layout(location = 3) in vec3 vertex_normal;
layout(location = 4) in vec3 vertex_tangent;
layout(location = 5) in mat3 TBN;

layout(push_constant, std140) uniform ObjectData {
    mat4 _model;
    uint material_id;
};

#if DEPTH_ONLY_PASS

void main() { }

#else 

layout(location = 0) out vec4 _fs_diffuse;
layout(location = 1) out vec4 _fs_emissive_ao;
layout(location = 2) out vec4 _fs_gbuffer_world_position;
layout(location = 3) out vec4 _fs_normal;
layout(location = 4) out vec4 _fs_metallic_roughness;

MaterialAttributes fragment();

void main() {
    MaterialAttributes attributes = fragment();
    _fs_gbuffer_world_position = vec4(world_position, 1.0);
    _fs_diffuse = attributes.diffuse_color;
    
    _fs_emissive_ao.xyz = attributes.emissive * attributes.emissive_strength;
    _fs_emissive_ao.w = attributes.ambient_occlusion;

    _fs_normal = vec4(attributes.normal, 1.0);
    
    _fs_metallic_roughness.x = attributes.metallic;
    _fs_metallic_roughness.y = attributes.roughness;
    _fs_metallic_roughness.w = attributes.lit;
    
}

#endif