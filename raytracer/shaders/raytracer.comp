#version 460

#extension GL_EXT_debug_printf : enable

#define FLT_MAX 3.402823466e+38
#define FLT_MIN 1.175494351e-38
#define PI 3.14159265358979323846264338327950288

#define MAX_BOUNCES 10

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

#define TYPE_SPHERE 0
#define TYPE_PLANE 1
#define TYPE_MASK 0xF0000000
#define INDEX_MASK ~TYPE_MASK

struct Sphere {
  vec4 position_radius;
};
struct Plane {
  vec4 position;
  vec4 normal;
};
// For a sphere data1 = position, radius
// For a plane data1 = position, data2 = normal
struct Primitive {
  vec4 color;
  uvec4 type;
};

struct CameraInfo {
  vec4 position_fov;
  vec4 direction;
  vec4 image_size_time;
};

layout(set = 0, binding = 0, std140) readonly buffer Scene {
  uint num_prims;
  uint pad0;
  uint pad1;
  uint pad2;
  Primitive[] prims;
};
layout(set = 0, binding = 1, rgba8) uniform image2D output_image;

layout(set = 0, binding = 2, std140) readonly buffer SpheresBlock {
  Sphere[] spheres;
};

layout(set = 0, binding = 3, std140) readonly buffer PlanesBlock {
  Plane[] planes;
};

layout(push_constant) uniform CameraData { CameraInfo camera; };

struct HitResult {
  bool intersection;
  float t;
  vec3 intersection_point;
  vec3 hit_normal;
};

struct Ray {
  vec3 ray_origin;
  vec3 ray_direction;
  int parent;
  int bounces;
  float contribute;
  vec3 accumulated_color;
};

float hash( float n ){
  return fract(sin(n)*1751.5453);
}

float hash1( vec2 p ){
  return fract(sin(p.x+131.1*p.y)*1751.5453);
}

vec3 hash3( float n ){
  return fract(sin(vec3(n,n+1.0,n+2.0))*vec3(43758.5453123,22578.1459123,19642.3490423));
}

vec3 random3(vec3 c) {
  float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));
  vec3 r;
  r.z = fract(512.0*j);
  j *= .125;
  r.x = fract(512.0*j);
  j *= .125;
  r.y = fract(512.0*j);
  return r-0.5;
}

/*
Gets the Van der Corput representation of x, which is
a decimal number with x's binary representation mirrored as the decimal part.

e.g x = 154 = 0b10011010, so VdC(152) = 0.01011001
The formula is

VdC(x) = a_0 / 2 + ... + a_i / 2^i + ... + a_r / 2^r+1
where a_i are factors in the binary representation of x
*/
float van_der_corput_representation(uint x) {
  x = (x << 16u) | (x >> 16u);
  x = ((x & 0x55555555u) << 1u) | ((x & 0xAAAAAAAAu) >> 1u);
  x = ((x & 0x33333333u) << 2u) | ((x & 0xCCCCCCCCu) >> 2u);
  x = ((x & 0x0F0F0F0Fu) << 4u) | ((x & 0xF0F0F0F0u) >> 4u);
  x = ((x & 0x00FF00FFu) << 8u) | ((x & 0xFF00FF00u) >> 8u);
  return float(x) * 2.3283064365386963e-10; // / 0x100000000
}

// Returns vec2(x / num_samples, VdC(x)), useful to e.g
// This can be useful to e.g do "randomized" sampling on an hemisphere, since
// the returned numbers are in the [0, 1) range (and can be thus converted to
// hemispherical coords)
vec2 hammersley(uint x, uint num_samples) {
  return vec2(float(x) / float(num_samples), van_der_corput_representation(x));
}


// ray_normal must be normalized
HitResult ray_sphere_intersection(vec3 ray_origin, vec3 ray_normal,
                                  vec3 sphere_origin, float sphere_radius) {
  HitResult result;
  result.intersection = false;
  result.intersection_point = vec3(0.0);
  result.hit_normal = vec3(0.0);
  result.t = 0.0;

  vec3 D = (sphere_origin - ray_origin);
  float d_len = length(D);
  float dd = d_len * d_len;
  float rr = sphere_radius * sphere_radius;

  float theta = dot(ray_normal, D);
  float delta = theta * theta - dd + rr;

  if (delta < 0.0) {
    return result;
  } else if (delta < 0.005) {
    result.intersection = true;
    result.t = theta;
  } else {
    result.intersection = true;
    float sqrt_d = sqrt(delta);
    float t1 = theta + sqrt_d;
    float t2 = theta - sqrt_d;
    result.t = min(t1, t2);
  }

  if (result.t > 0.0) {
    result.intersection_point = ray_origin + ray_normal * (result.t + 0.01);
    result.hit_normal = -normalize(result.intersection_point - sphere_origin);
  }
  return result;
}

// ray_normal must be normalized
HitResult ray_plane_intersection(vec3 ray_origin, vec3 ray_normal,
                                 vec3 plane_origin, vec3 plane_normal) {
  HitResult result;
  result.intersection = false;
  result.intersection_point = vec3(0.0);
  result.hit_normal = -plane_normal;
  result.t = 0.0;

  float bottom = dot(ray_normal, plane_normal);
  if (bottom >= 0.005) {
    result.intersection = true;
    float top = -dot(plane_normal, plane_origin - ray_origin);
    result.t = top / bottom;
  }

  if (result.t > 0.0) {
    result.intersection_point = ray_origin + ray_normal * (result.t + 0.01);
  }

  return result;
}

vec3 get_camera_dir() {
  uvec2 image_size = imageSize(output_image);
  vec2 st =
      (vec2(gl_GlobalInvocationID.xy) + vec2(0.5) - vec2(image_size) * 0.5) /
      vec2(image_size * 0.5);
  float aspect_ratio =
      float(camera.image_size_time.x) / float(camera.image_size_time.y);
  float fovy_rads = camera.position_fov.w;
  st = vec2(st.x * aspect_ratio, st.y) * tan(fovy_rads / 2.0);

  vec3 camera_dir = normalize(camera.direction.xyz + vec3(st.x, st.y, 0.0));
  return camera_dir;
}

uint primitive_type(int prim_index) {
  Primitive prim = prims[prim_index];
  return (prim.type.x & TYPE_MASK) >> 28;
}
uint primitive_index(int prim_index) {
  Primitive prim = prims[prim_index];
  return (prim.type.x & INDEX_MASK);
}

HitResult find_closest_hit(vec3 origin, vec3 direction, inout int best_prim) {
  HitResult hit;
  hit.intersection = false;
  hit.t = FLT_MAX;

  for (int i = 0; i < num_prims; i++) {
    Primitive prim = prims[i];
    HitResult current_hit;

    uint prim_type = primitive_type(i);
    uint prim_ty_index = primitive_index(i);

    if (prim_type == TYPE_SPHERE) {
      Sphere sphere = spheres[prim_ty_index];
      current_hit =
          ray_sphere_intersection(origin, direction, sphere.position_radius.xyz,
                                  sphere.position_radius.w);
    } else if (prim_type == TYPE_PLANE) {
      Plane plane = planes[prim_ty_index];
      current_hit = ray_plane_intersection(
          origin, direction, plane.position.xyz, plane.normal.xyz);
    }
    if (current_hit.intersection && current_hit.t < hit.t) {
      hit = current_hit;
      best_prim = i;
    }
  }

  return hit;
}

vec3 randomSpherePoint(vec2 rand) {
  float ang1 = (rand.x + 1.0) * PI; // [-1..1) -> [0..2*PI)
  float u = rand.y; // [-1..1), cos and acos(2v-1) cancel each other out, so we
                    // arrive at [-1..1)
  float u2 = u * u;
  float sqrt1MinusU2 = sqrt(1.0 - u2);
  float x = sqrt1MinusU2 * cos(ang1);
  float y = sqrt1MinusU2 * sin(ang1);
  float z = u;
  return vec3(x, y, z);
}
vec3 randomHemispherePoint(vec2 rand, vec3 n) {
  /**
   * Generate random sphere point and swap vector along the normal, if it
   * points to the wrong of the two hemispheres.
   * This method provides a uniform distribution over the hemisphere,
   * provided that the sphere distribution is also uniform.
   */
  vec3 v = randomSpherePoint(rand);
  return v * sign(dot(v, n));
}

vec3 trace_scene(vec3 camera_direction, uvec2 image_size, inout uvec2 stats) {
  const int MAX_STACK_DEPTH = 1024;
  Ray rays[MAX_STACK_DEPTH];
  rays[0].ray_direction = camera_direction;
  rays[0].ray_origin = camera.position_fov.xyz;
  rays[0].parent = -1;
  rays[0].bounces = 0;
  rays[0].contribute = 1.0;
  rays[0].accumulated_color = vec3(1.0);

  uint current_ray_index = 0;
  uint rays_dispatched = 1;

  // 1 Dispatch rays
  while(current_ray_index != rays_dispatched) {
    uint current_top = rays_dispatched;

    int prim_index = 0;
    for (uint i = current_ray_index; i < current_top; i ++) {
      Ray ray = rays[i];
      HitResult hit = find_closest_hit(ray.ray_origin, ray.ray_direction, prim_index);
      if (hit.intersection) {
        rays[i].accumulated_color = prims[prim_index].color.xyz;
        const uint RAYS_TO_DISPATCH_PER_HIT = 1;
        for (uint r = 0; r < RAYS_TO_DISPATCH_PER_HIT && rays_dispatched < MAX_STACK_DEPTH; r ++) {
          vec3 direction = randomHemispherePoint(hammersley(r, RAYS_TO_DISPATCH_PER_HIT), hit.hit_normal);

          rays[rays_dispatched].ray_origin = hit.intersection_point;
          rays[rays_dispatched].ray_direction = direction;
          rays[rays_dispatched].contribute = ray.contribute * 0.5 * 1.0 / float(RAYS_TO_DISPATCH_PER_HIT);
          rays[rays_dispatched].accumulated_color = vec3(1.0);
          rays[rays_dispatched].parent = int(i);

          rays_dispatched += 1;
        }
      } else {
        rays[i].accumulated_color = vec3(1.0);
      }

      current_ray_index += 1;
    }
  }

  int current_parent = rays[rays_dispatched-1].parent;
  vec3 accum = vec3(0.0);
  // 2 Accumulate ray colors
  while (rays_dispatched > 0) {
    rays_dispatched --;
    Ray ray = rays[rays_dispatched];
    if (ray.parent == current_parent) {
      accum += ray.accumulated_color * ray.contribute;
    } else {
      rays[current_parent].accumulated_color *= accum;
      current_parent = ray.parent;
      accum = ray.accumulated_color;
    }
  }

  return rays[0].accumulated_color;
}

void main() {
  uvec2 stats = uvec2(0);
  uvec2 image_size = imageSize(output_image);

  if (gl_GlobalInvocationID.x > image_size.x ||
      gl_GlobalInvocationID.y > image_size.y) {
    return;
  }

  vec3 pixel_color = vec3(0.0);
  const int NUM_SAMPLES = 1;
  for (int i = 0; i < NUM_SAMPLES; i ++) {
    vec3 dir = get_camera_dir();
    pixel_color += trace_scene(dir, image_size, stats);
  }
  pixel_color /= float(NUM_SAMPLES);


  imageStore(output_image,
             ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y),
             vec4(pixel_color, 1.0));
}